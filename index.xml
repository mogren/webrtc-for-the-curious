<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on WebRTC for the Curious</title><link>https://webrtcforthecurious.com/</link><description>Recent content in Introduction on WebRTC for the Curious</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://webrtcforthecurious.com/index.xml" rel="self" type="application/rss+xml"/><item><title>What, Why and How</title><link>https://webrtcforthecurious.com/docs/01-what-why-and-how/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/01-what-why-and-how/</guid><description>What is WebRTC? # WebRTC, short for Web Real-Time Communication, is both an API and a Protocol. The WebRTC protocol is a set of rules for two WebRTC agents to negotiate bi-directional secure real-time communication. The WebRTC API then allows developers to use the WebRTC protocol. The WebRTC API is specified only for JavaScript.
A similar relationship would be the one between HTTP and the Fetch API. WebRTC the protocol would be HTTP, and WebRTC the API would be the Fetch API.</description></item><item><title>Signaling</title><link>https://webrtcforthecurious.com/docs/02-signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/02-signaling/</guid><description>What is WebRTC Signaling? # When you create a WebRTC agent, it knows nothing about the other peer. It has no idea who it is going to connect with or what they are going to send! Signaling is the initial bootstrapping that makes a call possible. After these values are exchanged, the WebRTC agents can communicate directly with each other.
Signaling messages are just text. The WebRTC agents don&amp;rsquo;t care how they are transported.</description></item><item><title>Connecting</title><link>https://webrtcforthecurious.com/docs/03-connecting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/03-connecting/</guid><description>Why does WebRTC need a dedicated subsystem for connecting? # Most applications deployed today establish client/server connections. A client/server connection requires the server to have a stable well-known transport address. A client contacts a server, and the server responds.
WebRTC doesn&amp;rsquo;t use a client/server model, it establishes peer-to-peer (P2P) connections. In a P2P connection the task of creating a connection is equally distributed to both peers. This is because a transport address (IP and port) in WebRTC can not be assumed, and may even change during the session.</description></item><item><title>Securing</title><link>https://webrtcforthecurious.com/docs/04-securing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/04-securing/</guid><description>What security does WebRTC have? # Every WebRTC connection is authenticated and encrypted. You can be confident that a 3rd party can&amp;rsquo;t see what you are sending or insert bogus messages. You can also be sure that the WebRTC Agent that generated the Session Description is the one you are communicating with.
It is very important that no one tampers with those messages. It is ok if a 3rd party reads the Session Description in transit.</description></item><item><title>Real-time Networking</title><link>https://webrtcforthecurious.com/docs/05-real-time-networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/05-real-time-networking/</guid><description>Why is networking so important in Real-time communication? # Networks are the limiting factor in Real-time communication. In an ideal world we would have unlimited bandwidth and packets would arrive instantaneously. This isn&amp;rsquo;t the case though. Networks are limited, and the conditions could change at anytime. Measuring and observing network conditions is also a difficult problem. You can get different behaviors depending on hardware, software and the configuration of it.</description></item><item><title>Media Communication</title><link>https://webrtcforthecurious.com/docs/06-media-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/06-media-communication/</guid><description>What do I get from WebRTC&amp;rsquo;s media communication? # WebRTC allows you to send and receive an unlimited amount of audio and video streams. You can add and remove these streams at anytime during a call. These streams could all be independent, or they could be bundled together! You could send a video feed of your desktop, and then include audio/video from your webcam.
The WebRTC protocol is codec agnostic.</description></item><item><title>Data Communication</title><link>https://webrtcforthecurious.com/docs/07-data-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/07-data-communication/</guid><description>What do I get from WebRTC&amp;rsquo;s data communication? # WebRTC provides data channels for data communication. Between two peers you can open 65,534 data channels. A data channel is datagram based, and each has its own durability settings. By default, each data channel has guaranteed ordered delivery.
If you are approaching WebRTC from a media background data channels might seem wasteful. Why do I need this whole subsystem when I could just use HTTP or WebSockets?</description></item><item><title>Applied WebRTC</title><link>https://webrtcforthecurious.com/docs/08-applied-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/08-applied-webrtc/</guid><description>Applied WebRTC # Now that you know how WebRTC works it is time to build with it. This chapter explores what people are building with WebRTC, and how they are building it. You will learn all the interesting things that are happening with WebRTC. The power of WebRTC comes at a cost. Building production grade WebRTC services is challenging. This chapter will try and explain those challenges before you hit them.</description></item><item><title>Debugging</title><link>https://webrtcforthecurious.com/docs/09-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/09-debugging/</guid><description>Debugging # Debugging WebRTC can be a daunting task. There are a lot of moving parts, and they all can break independently. If you aren&amp;rsquo;t careful, you can lose weeks of time looking at the wrong things. When you do finally find the part that is broken, you will need to learn a bit to understand why.
This chapter will get you in the mindset to debug WebRTC. It will show you how to break down the problem.</description></item><item><title>History</title><link>https://webrtcforthecurious.com/docs/10-history-of-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/10-history-of-webrtc/</guid><description>History # This section is ongoing, and we don&amp;rsquo;t have all the facts yet. We are conducting interviews to build a history of digital communication.
RTP # RTP and RTCP is the protocol that handles all media transport for WebRTC. It was defined in RFC 1889 in January 1996. We are very lucky to have one of the authors Ron Frederick talk about it himself. Ron recently uploaded Network Video tool, a project that informed RTP.</description></item><item><title>FAQ</title><link>https://webrtcforthecurious.com/docs/11-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/11-faq/</guid><description>FAQ # Why does WebRTC use UDP? NAT Traversal requires UDP. Without NAT Traversal establishing a P2P connection wouldn&amp;rsquo;t be possible. UDP doesn&amp;rsquo;t provide &amp;ldquo;guaranteed delivery&amp;rdquo; like TCP, so WebRTC provides it at the user level.
See Connecting for more info.
How many DataChannels can I have? 65536 channels as stream identifier has 16 bits. You can close and open a new one at any time. Does WebRTC impose bandwidth limits?</description></item></channel></rss>