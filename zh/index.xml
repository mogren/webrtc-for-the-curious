<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>介绍 on 给好奇者的WebRTC</title><link>https://webrtcforthecurious.com/zh/</link><description>Recent content in 介绍 on 给好奇者的WebRTC</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://webrtcforthecurious.com/zh/index.xml" rel="self" type="application/rss+xml"/><item><title>是什么，为什么，如何使用</title><link>https://webrtcforthecurious.com/zh/docs/01-what-why-and-how/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/01-what-why-and-how/</guid><description>WebRTC是什么？ # WebRTC是Web实时通信（Real-Time Communication）的缩写，它既是API也是协议。WebRTC协议是两个WebRTC代理协商双向安全实时通信的一组规则。开发人员可以通过WebRTC API使用WebRTC协议。目前WebRTC API仅有JavaScript版本。
可以用HTTP和fetch API来类比。WebRTC协议就是HTTP，而WebRTC API就是fetch API。
除了JavaScript语言，WebRTC协议也可以在其他API/语言中使用。您还可以找到WebRTC的服务器和特定领域的工具。所有这些实现都使用WebRTC协议，因此它们可以彼此交互。
WebRTC协议由IETF工作组在rtcweb中维护。WebRTC API的W3C文档在webrtc-pc。
为什么我应该学习WebRTC？ # 下面这些就是WebRTC会给您的东西。这份清单并不详尽，只是您在学习旅途中可能会喜欢的一些东西。如果您还不了解其中一些术语，请不要担心，本书将陆续将这些概念教给您。
开放标准 多种实现 在浏览器中可用 强制加密 NAT遍历 重新利用现有技术 拥塞控制 亚秒级延迟 WebRTC协议是一组其他技术的集合体 # 这个主题需要整本书来解释。但是，首先，我们将其分为四个步骤。
信令（Signaling） 连接（Connecting） 保护（Securing） 通信（Communicating） 这四个步骤依次发生。上一个步骤必须100％成功，随后的步骤才能开始。
关于WebRTC的一个特殊事实是，每个步骤实际上都是由许多其他协议组成的！为了制作WebRTC，我们将许多现有技术结合在一起。从这个意义上讲，WebRTC更加是自2000年代以来就已经存在的易于理解的技术的组合和配置。
每个步骤都有专门的章节，但是首先从较高的层次上理解它们会有所帮助。由于它们彼此依赖，因此理解这些在进一步解释每个步骤的目的时会有所帮助。
信令：peer如何在WebRTC中找到彼此 # 当WebRTC代理启动时，它不知道与谁通信以及他们将要通信的内容。信令解决了这个问题！信令用于引导呼叫，以便两个WebRTC代理可以开始通信。
信令使用现有协议SDP。SDP是纯文本协议。每个SDP消息均由键/值对组成，并包含“media sections”列表。两个WebRTC代理交换的SDP所包含一些详细信息，如：
代理可访问的IP和端口（候选） 代理希望发送多少路音频和视频流 代理支持哪些音频和视频编解码器 连接时需要使用的值（uFrag/uPwd） 保护时使用的值（证书指纹） 注意，信令通常发生在“out-of-band”。也就是说，应用通常不使用WebRTC本身来交换信令消息。在连接的peer中，任何适合发送消息的架构均可被用于传递SDP信息，许多应用程序都使用其现有的基础结构（例如REST端点，WebSocket连接或身份验证代理）来解决适当客户端之间的SDP传递问题。
使用STUN/TURN进行连接和NAT穿透 # 现在，两个WebRTC代理知道足够的详细信息以尝试相互连接。接下来，WebRTC将使用另一种成熟的技术，称为ICE。
ICE（交互式连接建立）是WebRTC之前的协议。ICE允许在两个代理之间建立连接。这些代理可以在同一网络上，也可以在世界的另一端。ICE是无需中央服务器即可建立直接连接的解决方案。
这里真正的魔法是“ NAT穿透”和STUN/TURN服务器。这两个概念是与另一个子网中的ICE代理进行通信所需的全部。稍后我们将深入探讨这些主题。
ICE成功连接后，WebRTC继续建立加密的传输。此传输用于音频，视频和数据。
使用DTLS和SRTP保护传输层 # 现在我们有了双向通信（通过ICE），我们需要建立安全的通信。这是通过WebRTC之前的两种协议完成的。第一个协议是DTLS（数据报传输层安全性），它只是基于UDP的TLS。TLS是用于保护通过HTTPS进行通信的加密协议。第二种协议是SRTP（安全实时传输协议）。
首先，WebRTC通过在ICE建立的连接上进行DTLS握手来进行连接。与HTTPS不同，WebRTC不使用中央授权来颁发证书。相反，WebRTC只是判断通过DTLS交换的证书是否与通过信令共享的签名相符。然后，此DTLS连接可以被用于传输DataChannel消息。
接下来，WebRTC使用RTP协议进行音频/视频的传输。我们使用SRTP来保护我们的RTP数据包。我们从协商的DTLS会话中提取密钥，用来初始化SRTP会话。在下一章中，我们讨论为什么媒体传输拥有其自己的协议。
我们说完了！您现在可以进行安全的双向通信。如果您的WebRTC代理之间具有稳定的连接，上面这就是您可能需要解决的所有复杂问题。不幸的是，现实世界中存在着数据包丢失和带宽限制，下一章节将介绍我们如何处理它们。</description></item><item><title>信令</title><link>https://webrtcforthecurious.com/zh/docs/02-signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/02-signaling/</guid><description>什么是WebRTC信令？ # 当一个WebRTC代理被创建时，它对其他peer一无所知。它不知道它将与谁联系，也不知道它们将发送些什么！ 信令是使呼叫成为可能的初始引导程序。交换信令消息后，WebRTC代理才可以直接相互通信。
信令消息只是文本。WebRTC代理并不关心它们的传递方式。信令通常使用Websockets分享，但这不是必需的。
WebRTC信令如何工作？ # WebRTC使用到一种现有的协议，称为会话描述协议（Session Description Protocol，简称SDP）。两个WebRTC代理会将建立连接所需的所有状态通过此协议来分享。该协议本身亦易于阅读和理解。 但要理解WebRTC填充于协议中的所有值，将有一定复杂性。
该协议不特定于WebRTC。我们将首先学习会话描述协议，这里甚至不用谈论WebRTC。WebRTC实际上仅利用了协议的子集，因此我们将仅介绍我们所需的内容。 理解协议后，我们将继续结合WebRTC来说明其在实际中的应用方法。
什么是 会话描述协议（SDP）？ # 会话描述协议定义于 RFC 4566 中。它是一个key/value协议，每一行是一个值。看起来类似于INI文件。 一个会话描述包含零个或多个媒体描述。对此模型，可以理解为会话描述包含了一个媒体描述的数组。
一个媒体描述通常映射到单个媒体流。因此，如果您想描述一个包含三个视频流和两个音轨的呼叫，需要五个媒体描述。
如何阅读SDP信息 # 会话描述中的每一行都将以一个单字符开始，这是您的key。单字符后面将跟随一个等号。等号后的所有内容都是value。value结束的地方将有一个换行符。
会话描述协议定义了所有有效的key。对于协议中定义的key，您只能使用字母。这些key都有重要的意义，稍后将对此进行解释。
作为参考，下面是一个会话描述的部分内容。
a=my-sdp-value a=second-value 这里有两行。每行的key都是a。第一行的value为my-sdp-value，第二行的value为second-value。
WebRTC仅使用了部分SDP的key # WebRTC并未使用会话描述协议定义的所有key。您当前只需要理解下面的7个key。
v - Version，版本，版本，应等于0 o - Origin，源，包含一个唯一ID，用于重新协商 s - Session Name，会话名称，应等于- t - Timing，时间，应等于0 0 m - Media Description(m=&amp;lt;media&amp;gt; &amp;lt;port&amp;gt; &amp;lt;proto&amp;gt; &amp;lt;fmt&amp;gt; ...)，媒体描述，下面有详细说明 a - Attribute，属性，一个自由文本字段，这是WebRTC中最常见的行 c - Connection Data，连接数据，应等于IN IP4 0.0.0.0 会话描述中的媒体描述 # 一个会话描述中，可以包含无限数量的媒体描述。</description></item><item><title>连接</title><link>https://webrtcforthecurious.com/zh/docs/03-connecting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/03-connecting/</guid><description>为什么WebRTC需要专用的子系统进行连接？ # 目前，大多数部署的应用程序都通过客户端/服务器方式进行连接。客户端/服务器方式连接要求服务器具有稳定且公开可用的传输地址。客户端与服务器联系，然后服务器做出响应。
WebRTC不使用客户端/服务器模型，它建立点对点（P2P）连接。 在P2P连接中，创建连接的任务被平均分配给两个对等方。这是因为无法猜测WebRTC中的传输地址（IP和端口），而且，在会话过程中，传输地址甚至可能会变更。WebRTC将收集所有可能收集的信息，并将尽力实现两个WebRTC代理之间的双向通信。
听起来简单，建立点对点连接实际上可能会非常困难。这些代理可能位于没有直接连接的不同网络中。即使在两个代理可以直接连接的情况下，您可能还会遇到其他问题。比如在某些情况下，两个客户端使用不同的网络协议（UDP &amp;lt;-&amp;gt; TCP）或使用不同的IP版本（IPv4 &amp;lt;-&amp;gt; IPv6）。
尽管在建立点对点连接方面存在一些困难，在WebRTC提供的下面这些属性的帮助下，您仍然可以获得相对于传统客户端/服务器技术的一些优势。
降低带宽成本 # 由于媒体通信直接发生在peer之间，因此您无需付费或托管单独的服务器来转发媒体。
更低延迟 # 直接通信时速度更快！当用户必须通过您的服务器运行所有内容时，这会使传输速度变慢。
安全的端到端通信 # 直接通信更安全。由于用户数据根本没有通过服务器，因此用户不需要考虑服务端会不会解密。
它是如何工作的？ # 上面描述的连接过程是通过Interactive Connectivity Establishment（交互式连接建立/ICE） 实现的。这是另一个在WebRTC之前就已经出现的协议。
ICE是一种用来寻找两个ICE代理之间通信的最佳方式的协议。每个ICE代理都会发布如何访问自己的方式，这些路径被称为候选地址（candidates）。候选地址本质上是一个传输地址，ICE代理认为这个传输地址可能可以被对端访问到。接下来ICE将确定候选地址的最佳搭配。
本章稍后将详细介绍实际的ICE过程。要了解ICE为什么存在，最好先了解我们要面临的网络特性。
现实世界的网络限制 # ICE就是克服现实世界网络限制的方法。在我们开始讨论ICE如何解决问题之前，先讨论一下有哪些实际问题。
不在同一个网络中 # 在大多数情况下，两个WebRTC代理不在同一个网络中。典型的呼叫通常是在没有直接连接的不同网络中的两个WebRTC代理之间进行的。
下面是通过公共互联网连接的两个不同网络的示意图。在每个网络中，您拥有两个主机。
对于同一网络中的主机来说，互相连接非常容易。例如在192.168.0.1 -&amp;gt; 192.168.0.2之间通讯就很容易！这两个主机无需任何外部帮助即可相互连接。
但是，使用Router B的主机无法直接访问Router A背后的任何主机。您如何区分Router A后面的191.168.0.1主机和Router B后面相同IP的主机之间的区别呢？它们都使用内网IP！使用Router B的主机可以将数据直接发送到Router A，但是请求在那里就结束了。Router A怎么知道它应该将消息转发给哪台主机呢？
协议限制 # 有些网络不允许UDP通信，或者也有可能不允许TCP。有些网络的MTU（Maximum Transmission Unit/最大传输单元）可能非常低。网络管理员可以更改许多变量，这些修改可能会使通信变得困难。
防火墙/IDS规则 # 另一个问题是深度数据包检查和其他智能过滤方式。某些网络管理员将运行一些软件，这些软件会试图处理每个数据包。很多时候，这些软件无法识别WebRTC的数据包，由于它们不知道如何处理，它们可能会阻拦这些数据包，例如，它们可能将WebRTC数据包视为不在端口白名单上的可疑UDP数据包。
NAT映射 # NAT（网络地址转换）映射是使得WebRTC连接成为可能的魔法。WebRTC就是使用NAT让处于完全不同的子网中的两个peer进行通信，从而解决了上述&amp;quot;不在同一网络中&amp;quot;的问题。尽管它带来了新的挑战，但让我们先来解释一下NAT映射是如何工作的。
NAT映射不使用中继，代理或服务器。跟上一个例子一样，我们有Agent 1和Agent 2，它们位于不同的网络中。然而，流量穿透了路由器。看起来就像这样：</description></item><item><title>安全性</title><link>https://webrtcforthecurious.com/zh/docs/04-securing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/04-securing/</guid><description>WebRTC具有哪些安全性保障？ # 每个WebRTC连接都经过身份验证和加密。您可以确信第三方看不到您发送的内容，也无法插入虚假消息。您还可以确保与您进行通信的WebRTC代理正是生成会话描述的代理。
没有人能够篡改消息这一点非常重要。如果第三方在传输中读取了会话描述，这不会产生什么影响。然而，WebRTC无法防止会话描述被修改。攻击者可以通过更改ICE候选地址和证书指纹来对您进行中间人攻击（man-in-the-middle）。
译注：这里指的是，P2P连接建立之后，双方之间的通信安全是有保障的。但在连接建立的过程中，攻击者可以通过man-in-the-middle方式伪装中间人同时与通信双方建立连接并通信。 它是如何做到的？ # WebRTC使用两个预先存在的协议，数据报传输层安全（Datagram Transport Layer Security / DTLS）和 安全实时传输协议（Secure Real-time Transport Protocol / SRTP）。
DTLS使您可以协商会话，然后在两个peer之间安全地交换数据。它是TLS的同类产品，TLS是HTTPS所使用的技术，而DTLS与TLS的区别仅在与其使用UDP而不是TCP作为其传输层。这也意味着DTLS协议必须处理不可靠的数据传输。SRTP是专为安全的交换媒体数据而设计的。相对于DTLS而言，使用SRTP对传输媒体数据有一些优化。
DTLS先被使用。它通过ICE提供的连接进行一次握手。DTLS是一种客户端/服务器协议，因此其中一侧需要开始握手。客户端/服务器的角色是在信令中被确定的。在DTLS握手期间，双方都会提供证书。 握手完成后，需要将收到的证书与会话描述中的证书哈希进行比较。这是为了确定握手的目标就是您所期望的WebRTC代理。接下来，可以将DTLS连接用于DataChannel通信。
要创建SRTP会话，我们使用DTLS生成的密钥对其进行初始化。SRTP没有握手机制，因此必须使用外部密钥进行引导。一旦完成此操作，媒体数据即可以用SRTP加密并进行交换！
安全性101 # 要了解本章介绍的技术，您首先需要了解这些术语。密码学是一个棘手的主题，因此其他资源也是值得参考的！
Cipher # Cipher是将明文转换为密文的一系列步骤。Cipher可以反过来运行，因此您可以将密文恢复为明文。一个Cipher通常拥有一个更改其行为的密钥。还有一个术语是加密和解密。
举例来说，一个简单的cipher是ROT13。也就是每个字母向前移动13个字符。要解密这个cipher，需要每个字母向后移动13个字符。明文HELLO将成为密文URYYB。 在这种情况下，Cipher是ROT，密钥是13。
明文/密文 # 明文是cipher的输入。密文是cipher的输出。
哈希 # 哈希是一种生成摘要的单向过程。给定一个输入，它每次都会生成相同的输出。其重要特点是输出不可逆。也就是说，根据输出的摘要，无法确定其输入。当您要确认消息未被篡改时，哈希很有用。
举例来说，一个简单的哈希将是仅将所有其他字母HELLO变成HLO。您不能认为HELLO就是输入，但可以确认如果输入的是HELLO，那么结果是匹配的。
公钥/私钥加密 # 公钥/私钥加密描述了DTLS和SRTP使用的cipher类型。在此系统中，您有两个密钥，即公钥和私钥。公钥用于加密消息，可以安全共享。 私钥用于解密消息，永远不应共享。当解密那些使用对应的公钥加密的消息时，它是唯一的密钥。
Diffie-Hellman交换 # Diffie-Hellman交换允许两个以前从未见过的用户通过Internet安全的创建一个共享的秘密信息。用户A可以将秘密信息发送给用户B，而不必担心被窃听。破解该信息的难度将取决于破解离散对数问题的难度。 您不必完全理解该算法是如何工作的，但这可以帮助您了解是什么使得DTLS握手变得可行的。
Wikipedia在此处中有一个实际的例子。
伪随机函数（PRF） # 伪随机函数是一个预定义函数，用于生成随机出现的值。它可能需要多个输入并生成一个输出。
密钥派生（KDF） # 密钥派生是一类伪随机函数。是一种用于增强密钥的安全性的方法。一种常见的模式是密钥扩展。
假设您获得的密钥为8字节。您可以使用KDF使其更坚固。
Nonce # Nonce是cipher的附加输入。这样，即使您多次加密同一条消息，也可以从cipher中获得不同的输出。
如果将同一条消息加密10次，cipher将为您提供10次相同的密文。通过使用nonce，在使用同一个密钥的情况下，您将得到不同的输入。需要注意的是，每条消息都要使用不同的nonce！ 否则就没有什么意义了。</description></item><item><title>搭建实时网络</title><link>https://webrtcforthecurious.com/zh/docs/05-real-time-networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/05-real-time-networking/</guid><description>为什么网络在实时通信中如此重要？ # 网络是实时通信中的限制因素。在理想的世界中，我们将拥有无限的带宽，并且数据包会即时到达。但事实并非如此。网络是受限的，且其限定条件随时可能更改。测量和观察网络状况也是一个难题。根据您所使用的硬件，软件及其配置，您可能看到不同的表现。
实时通信也带来了其他大多数领域中不存在的问题。对于网站开发人员来说，如果您的网站在某些网络上运行速度较慢，那不是致命问题。只要所有数据到达，用户都会感到满意。但对于WebRTC，如果您的数据延迟了，那就没用了。没有人在乎5秒钟前的电话会议中所说过的话。因此，在开发一个实时通信系统时，必须作出权衡。我的时间限制是多少，可以发送多少数据？
本章介绍了适用于数据和媒体通信的概念。在后面的章节中，我们将超出理论范围，讨论一下WebRTC的媒体和数据子系统如何解决这些问题。
使网络变得困难的有哪些属性？ # 在所有网络上都能有效工作的代码很复杂。您会面对许多不同的因素，它们都可以相互影响。这些是开发人员将遇到的最常见问题。
带宽 # 带宽是可以在给定路径上传输的最大数据速率。请记住，这也不是一个静态数字，这一点很重要。随着越来越多（或更少）的人使用带宽，带宽将沿路由变化。
传输时间和往返时间 # 传输时间指的是一个数据包需要多长时间到达。像带宽一样，这不是恒定的。 传输时间随时可能波动。
传输时间 = 接收时间 - 发送时间
要计算传输时间，您需要将发送方和接收方的时钟以毫秒级精度同步。 即使一个很小的偏差也会导致传输时间的测量结果不可靠。 由于WebRTC在高度异构的环境中运行，因此依靠主机之间完美的时间同步（来测量传输时间）几乎是不可能的。
往返时间测量是对不完美的时钟同步的一种解决方法。
（要测量往返时间，）WebRTC peer不使用分布式时钟，而是发送一个特殊数据包，携带名为sendertime1的自己的时间戳。 合作的peer接收到这个特殊数据包后，会将时间戳返还给发送方。 当原始发送方获得返还的时间戳时，它会用当前时间sendertime2减去sendertime1时间戳。 得到的时间差称为&amp;quot;往返传播延迟（round-trip propagation delay）&amp;quot;，或者就使用更常见的&amp;quot;往返时间&amp;rdquo;。
rtt（往返时间） = sendertime2 - sendertime1
通常认为，往返时间的一半是传输时间足够好的近似值。 但此解决方法并非没有缺点。 它假设发送和接收数据包花费的时间是相等的。 但是，在蜂窝网络上，发送和接收操作可能不是时间对称的。 您可能已经注意到了，手机上的上传速度几乎总是低于下载速度。
传输时间 = rtt（往返时间）/2
关于往返时间测量的技术，在RTCP的发送方和接收方报告章节中有更详细的描述。
抖动 # 抖动是每个数据包的传输时间可能会有所不同的现实表现。您的数据包可能会延迟，但随后会突然大量集中到达。
数据包丢失 # 数据包丢失是指消息在传输中丢失。数据损失率可能是稳定的，也可能出现波峰和波谷。 这可能是由于网络类型的原因造成的，例如卫星或Wi-Fi等。或者也可能是传输路径上的软件导致的。
最大传输单位（MTU） # 最大传输单位指的是单个数据包大小的限制。网络不允许您发送一个巨大的消息。在协议级别，消息可能必须被拆分为多个较小的数据包。
根据您采用的网络路径，MTU也将有所不同。您可以使用MTU路径发现之类的协议来确定可以发送的最大数据包大小。
拥塞 # 拥塞是指网络达到极限时的情况。这通常是因为您已达到当前路由可以处理的峰值带宽。或者可能是运营商对您的ISP配置导致，比如限制了每小时的流量。
拥塞会以多种不同的方式展现出来。没有标准化的表现。在大多数情况下，当拥塞发生时，网络将丢弃多余的数据包。在其他一些情况下，网络将缓存数据包。这将导致数据包的传输时间增加。随着网络的拥塞，您还会看到更多的抖动。这是一个快速变化的领域，并且还有其他用于拥塞检测的新算法目前仍在编写中。
动态变化 # 网络是动态的，各种状况可能会迅速变化。在通话过程中，您可能会发送和接收数十万个数据包。 这些数据包可能经过多个跃点。这些跃点可能由数百万其他用户共享。即使在您的本地网络中，您也可能正在下载高清电影，或者可能有设备正要下载软件更新。</description></item><item><title>媒体通信</title><link>https://webrtcforthecurious.com/zh/docs/06-media-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/06-media-communication/</guid><description>我可以从WebRTC的媒体通信中得到什么？ # WebRTC允许您发送和接收无限多条音频和视频流。您可以在通话期间随时添加和删除这些流。这些流可以全部独立，也可以捆绑在一起！您甚至可以将网络摄像头的音频/视频放到您桌面的视频流中，然后将此视频流以feed的形式发送出去。
WebRTC协议与编解码器无关。底层传输支持所有格式的内容，即使是还不存在的格式！ 但是，您正与之通信的WebRTC代理可能没有必要的工具来接受它。
WebRTC针对动态网络状况也有对应的处理方案。在通话过程中，带宽可能会增加或减少。甚至可能突然间大量丢包。该协议对所有这类问题的处理都做了相应的设计。WebRTC根据网络状况作出响应，并尝试利用可用资源为您提供最佳体验。
它是如何工作的？ # WebRTC使用RFC 1889中定义的两个既有协议RTP和RTCP。
RTP（实时传输协议/Real-time Transport Protocol）是承载媒体的协议。它为视频的实时传输而设计。它没有规定有关延迟或可靠性的任何规则，但是为您提供了实现这些规则的工具。RTP提供了流的设计，因此您可以通过一个连接发布多个媒体源。它还为您提供了完善媒体传递途径所需的计时和排序信息。
RTCP（RTP控制协议/RTP Control Protocol）是用于传达有关呼叫的元数据的协议。其格式非常灵活，并允许您可以添加所需的任何元数据。这点被用来传达有关呼叫的统计信息。也是处理分组丢失和实现拥塞控制的必备特性。它为您提供了响应变化的网络状况所必需的双向通信能力。
延迟与质量 # 实时媒体就是要在延迟和质量之间进行权衡。您愿意忍受的延迟时间越长，可以预期的视频质量就越高。
现实世界的局限性 # 下面这些限制都是由现实世界的局限性引起的。它们都是您需要考虑的网络特性。
视频是复杂的 # 传输视频并不容易。要存储30分钟未压缩的720p的8-bit视频，您需要~110Gb。按照这个数据，4人电话会议就开不成了。我们需要一种缩小尺寸的方法，而答案就是视频压缩。但是，这并非没有缺点。
视频101 # 我们不会深入介绍视频压缩，只需要让大家足以理解为什么RTP是这么设计的。视频压缩会将视频编码为一种新格式，这样可以需要较少的bit数来表示同一视频。
有损和无损压缩 # 您可以将视频编码为无损（无信息丢失）或有损（信息可能丢失）压缩。由于无损编码需要将更多的数据发送到对端，这样会导致更高的流延迟和更多的丢包，因此RTP通常使用有损压缩，即使这样可能会导致视频质量不佳。
帧内和帧间压缩 # 视频压缩有两种类型。首先是帧内压缩。帧内压缩减少了用于描述单个视频帧的bit数。相同的技术被用来压缩静态图片，例如JPEG压缩方法。
第二种类型是帧间压缩。由于视频是由许多图片组成的，因此我们需要寻找无需将相同信息发送两次的方式。
帧间压缩 # 帧有三种类型
I帧 - 一张完整的图片，无需任何其他内容即可解码 P帧 - 一张图片的一部分，包含对之前图片的修改 B帧 - 一张图片的一部分，包含对之前图片和将来图片的修改 以下是对这三种类型帧的图解。
视频很脆弱 # 压缩后的视频是有状态的，（视频解码）非常依赖其上下文，这使得视频很难通过Internet进行传输。想像一下，如果I帧的一部分丢失了会怎样？这样P帧如何知道要修改的内容？ 随着视频压缩变得越来越复杂，这成为一个更大的问题。幸运的是，RTP和RTCP对此都有解决方案。
RTP # Packet Format（包格式） # 每个RTP数据包都具有以下结构：</description></item><item><title>数据通信</title><link>https://webrtcforthecurious.com/zh/docs/07-data-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/07-data-communication/</guid><description>我可以从WebRTC的数据通信中获得什么？ # WebRTC提供用于数据通信的数据通道。在两个peer之间，您可以打开65,534个数据通道。 数据通道基于数据报，并且每个通道都有其自己的持久性设置。默认设置下，每个数据通道都能保证有序交付。
如果您从传递媒体数据的角度开始接触WebRTC，可能数据通道看起来是一种浪费。当我只使用HTTP或WebSocket就能传递数据的时候，为什么需要整个数据通道子系统呢？
数据通道的真正强大之处在于，您可以将它们配置为像UDP一样进行无序/有损传递。 对于低延迟和高性能的情况，这是必需的。您可以测量背压，并确保您仅发送网络支持的最大数据量。
它是如何工作的？ # WebRTC使用RFC 2960中定义的流控制传输协议（SCTP）。SCTP是一种传输层协议，旨在替代TCP或UDP。对于WebRTC，我们将SCTP用作在DTLS连接上运行的应用层协议。
SCTP为您提供流，并且每个流都可以独立配置。WebRTC数据通道只是基于流的简单抽象。有关持久性和顺序的设置会被直接传递到SCTP代理中。
数据通道具有SCTP无法表达的某些功能，例如通道标签。为了解决该问题，WebRTC使用了RFC 8832中定义的数据通道建立协议（DCEP）。DCEP定义了一条消息，用于传递通道标签和协议。
DCEP # DCEP只有两个消息DATA_CHANNEL_OPEN和DATA_CHANNEL_ACK。对于打开的每个数据通道，远端必须以ack响应。
DATA_CHANNEL_OPEN # 该消息由希望打开数据通道的WebRTC代理发送。
封包格式 # 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Message Type | Channel Type | Priority | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reliability Parameter | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Label Length | Protocol Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \ \ / Label / \ \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \ \ / Protocol / \ \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 消息类型（Message Type） # 消息类型是一个静态值0x03</description></item><item><title>WebRTC应用场景</title><link>https://webrtcforthecurious.com/zh/docs/08-applied-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/08-applied-webrtc/</guid><description>WebRTC应用场景 # 现在您已经知道WebRTC的工作原理，到了使用它的时候了。本章探讨人们使用WebRTC构建什么以及他们是如何实现的。您将学到基于WebRTC发生的所有有趣的事情。WebRTC的功能是有代价的。建立产品级的WebRTC服务相当有挑战性。本章将尝试解释这些挑战性的根源，这样您遇到问题时就能有所准备。
用例 # 许多人认为WebRTC只是一种在web浏览器中实现电话会议的技术。实际上，它能做的不仅如此！ WebRTC被广泛用于各种用例。新的用例一直在出现。在本章中，我们将列出一些常见的用例，并探讨一下WebRTC是如何对它们进行革新的。
电话会议 # 电话会议是WebRTC的原始用例。该协议包含浏览器中几个必要功能，这些功能没有其他协议提供支持。您可以使用WebSockets构建会议系统，在各种条件都满足的情况下，它可能可以工作。但如果您希望在现实世界的网络条件下部署一些服务，那么WebRTC是最佳选择。
WebRTC为媒体提供拥塞控制和自适应比特率。随着网络条件的变化，用户仍将获得最佳体验。开发人员不必编写任何其他代码来处理这些情况。
参与者可以发送和接收多个流。他们还可以随时添加和删除这些流。编解码器也经过协商。所有这些功能都是由浏览器提供的，开发人员无需编写任何自定义代码。
数据通道也对电话会议有所助益。用户可以发送元数据或共享文档。如果更看重性能而不是可靠性，可以创建多个流并对其进行配置。
广播 # 许多使用WebRTC的新项目开始出现在广播领域中。协议为媒体的发布者和消费者都提供了很多支持。
浏览器中的WebRTC使得用户可以轻松发布视频。这样用户不需要下载新的客户端。 任何具有Web浏览器的平台都可以发布视频。发布者可以发送多个音轨/视频流，并可以随时对其进行修改/删除。传统协议每个连接只允许一个音轨/视频流，与之相比，这是一个巨大的改进。
WebRTC使开发人员可以更好地控制延迟/质量之前的权衡。有时可能不允许延迟超过特定阈值更重要，为此您可能愿意容忍对解码结果做一些修饰。您可以将查看器配置为媒体到达时立即播放。使用在TCP上运行的其他协议完成这一点并不是那么容易。但在浏览器中，您只需要请求数据，就这么简单。
远程访问 # 远程访问是当您通过WebRTC访问远端的另一台计算机。您可以完全控制远程主机，也可以只控制一个应用程序。当本地硬件无法执行计算任务时，这非常有用。例如，运行新的视频游戏或CAD软件。WebRTC能够通过下面三种方式彻底改变对物理空间的需求。
WebRTC可用于远程访问那些无法直接路由的主机。使用NAT遍历，您可以访问仅通过STUN可用的计算机。这对于安全性和隐私性非常有用。您的用户不必通过中转或所谓&amp;rsquo;跳转盒&amp;rsquo;来路由视频。NAT遍历还使得部署更加容易。您不必担心端口转发问题或提前设置静态IP。
在这种场景下，数据通道也非常强大。可以对它们进行配置，以便仅接受最新数据。使用TCP运行时，可能会遇到队头阻塞的风险。旧式的鼠标点击或按键可能会迟到，并阻止后续的鼠标被接受。 WebRTC的数据通道的设计可以处理此问题，并且可以配置为不重试丢失的数据包。您还可以测量背压，并确保您不会发送更多的数据以至于网络无法支持。
浏览器中提供的WebRTC极大地改善了生活质量。您无需下载专有客户端即可开始会话。捆绑了WebRTC的客户端越来越多，智能电视现在也开始拥有了完整的Web浏览器。
文件共享和审查制度 # 文件共享和审查规避是截然不同的问题。然而，WebRTC同时解决了他们两者的相同问题。它使得文件既容易获得又更难以阻止。
WebRTC解决的第一个问题是客户端的获取。如果要加入文件共享网络，需要下载客户端。即使网络是分布式的，您仍然需要首先获得客户端。在受限制的网络中，下载通常会被阻止。即使您可以下载它，用户也可能无法安装/运行客户端。而WebRTC在每个Web浏览器中都可用，这点使得它无处不在。
WebRTC解决的第二个问题是流量被阻止的情况。如果您使用的协议仅用于文件共享或审查制度，那么阻止它会容易得多。由于WebRTC是通用协议，阻止它将影响所有人。阻止WebRTC可能会影响网络中的其他用户加入电话会议。
分布式CDN # 物联网（IoT） # 物联网部分涵盖了几种不同的用例。许多人都见过网络连接的安防摄像头。使用WebRTC，您可以将视频流式地传输到另一个WebRTC对等设备，例如电话或浏览器。另一个用例是让设备连接并交换传感器数据。您的局域网中可以有两个设备，互相交换天气，噪音或明亮度的读数。
与传统的视频流协议相比，WebRTC具有巨大的隐私优势。由于WebRTC支持P2P连接，因此摄像头可以将视频直接发送到您的浏览器。没有必要将您的视频发送到第三方服务器。即使视频是经过加密的，攻击者也可以根据通话的元数据做出一些猜测。
互操作性是物联网领域的另一个优势。WebRTC支持多种不同的语言，包括C＃，C ++，C，Go，Java，Python，Rust和TypeScript。这意味着您可以使用最适合您的语言。而且您无需求助于专有协议或格式就可以连接两个不同的客户端。
媒体协议桥接 # 如果您现有的硬件和软件已经在产生视频，但是您还不能对其进行升级。期望用户下载专有客户端来观看视频是一件令人沮丧的事。解决问题的答案是运行一个WebRTC桥接器。桥接器在两种协议之间进行转换，因此用户可以在浏览器中使用旧的设置。
开发人员使用的许多协议格式都可以用WebRTC作桥接。SIP通常通过WebRTC暴露接口，并允许用户从其浏览器拨打电话。RTSP用于许多旧式安保摄像头。它们都使用相同的基础协议（RTP和SDP），因此其计算成本很低。只需要添加或删除WebRTC特定的内容即可完成桥接工作。
数据协议桥接 # Web浏览器只能通过一组受限制的协议通信。您可以使用HTTP，WebSockets，WebRTC和QUIC。如果要连接到其他设备，您需要使用协议桥。协议桥是将外部流量转换为浏览器可访问内容的服务器。一个流行的示例是从浏览器使用SSH访问服务器。使用WebRTC的数据通道构建协议桥的话，具有下面两个优势。
WebRTC的数据通道允许不可靠且无序的交付。这在低延迟至关重要的情况下是必需的。您不会希望新数据被旧数据阻挡，这就是所谓的队头阻塞。假设您正在玩多人参与的第一人称射击游戏。您真的在乎玩家在两秒钟前的位置吗？如果这些数据没有及时到达，那么继续尝试发送就没有意义了。不可靠和无序的传送使您在一收到数据时就可以立即得到它。
数据通道还提供压力反馈。这可以告诉您发送数据的速度是否超过了连接所能支持的速度。然后，当这种情况发生时，有两个选择。可以将数据通道配置为缓冲并延迟传送数据，也可以删除尚未实时到达的数据。
远程操作 # 远程操作是指通过WebRTC数据通道控制远端设备，并通过RTP将摄像头数据发送回来。现在的开发人员已经可以通过WebRTC远程驾驶汽车了！这种技术可以用来控制施工现场和运送包裹的机器人。使用WebRTC解决这些问题很有意义，原因有两个。
WebRTC的普及使用户可以轻松控制。用户所需的只是一个Web浏览器和一个输入设备。浏览器甚至支持从操纵杆和游戏手柄获取输入。WebRTC完全不需要在用户设备上安装其他客户端。
分布式CDN # 分布式CDN是文件共享的子集。分发的文件由CDN操作员配置。当用户加入CDN网络时，他们可以下载和共享允许的文件。用户获得与文件共享相同的所有好处。
当您在外部连接很差但LAN连接很好的办公室中时，这些CDN效果很好。您可以让一个用户下载视频，然后与其他人共享。由于不需要每个人都尝试通过外部网络获取相同的文件，因此传输将更快地完成。
WebRTC拓扑 # WebRTC是用于连接两个代理的协议，那么开发人员如何能同时连接上百人呢？您可以通过下面几种不同的方式来做到这一点，它们各有利弊。这些解决方案大致分为两类：点对点或客户端/服务器。WebRTC的灵活性使我们能够同时创建两者。</description></item><item><title>调试</title><link>https://webrtcforthecurious.com/zh/docs/09-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/09-debugging/</guid><description>调试 # 调试WebRTC可能是一项艰巨的任务。有很多部分都处于运行状态，每一个部分都可能出现问题。如果您不够细心，可能会浪费数周的时间来查看错误的模块。当您最终找到出错的部分时，您还需要学习一些知识才能理解问题的根源。
本章将带您学习WebRTC的调试。它将向您展示如何分析并定位相关问题。确定问题后，我们将快速介绍一下流行的调试工具。
分解问题 # 开始调试时，您需要先分解问题的源头。从以下题目开始：
信令故障 # 网络故障 # 使用netcat测试您的STUN服务器：
准备20字节的绑定请求数据包：
echo -ne &amp;quot;\x00\x01\x00\x00\x21\x12\xA4\x42TESTTESTTEST&amp;quot; | hexdump -C 00000000 00 01 00 00 21 12 a4 42 54 45 53 54 54 45 53 54 |....!..BTESTTEST| 00000010 54 45 53 54 |TEST| 00000014 解释：
00 01 是消息类型
00 00 是数据段的长度
21 12 a4 42 是magic cookie
54 45 53 54 54 45 53 54 54 45 53 54 （解码成ASCII就是TESTTESTTEST） 是12字节的transaction ID</description></item><item><title>历史</title><link>https://webrtcforthecurious.com/zh/docs/10-history-of-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/10-history-of-webrtc/</guid><description>历史 # 本节仍在进行中，我们还没有还原全部事实。我们正在进行采访，以修订数字通信的历史。
RTP # RTP和RTCP是处理WebRTC的所有媒体传输的协议。它是在1996年1月的RFC 1889中定义的。 我们很幸运地邀请一位作者Ron Frederick自己谈论这个问题。 罗恩最近上传了 Network Video tool，一个展示了RTP的项目。
用他自己的话说：
在1992年10月，我开始尝试使用Sun VideoPix帧采集卡，当时的想法是编写一个基于IP多播的网络视频会议工具。它是根据&amp;quot;vat&amp;quot;建模的，&amp;ldquo;vat&amp;quot;是LBL开发的一个音频会议工具，它为参加会议的用户使用了类似的轻量级会话协议，您可以简单地使用此工具将数据发送到特定的多播组，并监听来自该组中其他小组成员的任何流量。
为了使程序真正成功，它需要先压缩视频数据，然后再将其发布到网络上。我的目标是在大约128 kbps或标准家庭ISDN线路的带宽上生成可接受的可视数据流。我还希望在一半带宽下生成仍能被观看到的东西。这意味着我需要将特定图像尺寸和帧率的视频压缩到大约20分之一的大小。我实现了这种压缩，并申请了专利，专利是 US5485212A：用于电话会议的软件视频压缩。
1992年11月上旬，我向互联网社区发布了视频会议工具&amp;quot;nv&amp;rdquo;（二进制形式）。经过一些初步测试后，它被用于在全球范围内对11月Internet工程任务组的部分进行视频广播。在15个国家/地区中，大约有200个子网能够接收此广播，并且一周中的某个时候，大约有50-100人使用&amp;quot;nv&amp;quot;接收了视频。
在接下来的几个月中，另外三个研讨会和一些较小的会议使用&amp;quot;nv&amp;quot;向整个Internet进行广播，包括澳大利亚NetWorkshop，MCNC分组音频和视频研讨会以及瑞典的分布式虚拟现实MultiG研讨会。
随后，在1993年2月，我发布了&amp;quot;nv&amp;quot;的源代码，并在3月发布了该工具的一个版本，在其中引入了新的基于小波的压缩方案。在1993年5月，我增加了对彩色视频的支持。
用于&amp;quot;nv&amp;quot;和其他Internet会议工具的网络协议成为了实时传输协议（RTP）的基础，该协议通过Internet工程任务组（IETF）进行了标准化，该工作组首先在RFCs 1889-1890中发布，后来又与其他各种RFC一起，在RFCs 3550-3551中进行了修订，它们涵盖了用于传递特定音频和视频格式的配置文件。
在接下来的几年中，关于&amp;quot;nv&amp;quot;的工作继续进行，该工具被移植到了许多其他硬件平台和视频捕获设备上。它仍然被用作当时在Internet上广播会议的主要工具之一，包括被NASA选中以在线直播的方式进行航天飞机飞行任务的实时报道。
1994年，我在&amp;quot;nv&amp;quot;中添加了对其他人开发的视频压缩算法的支持，其中包括一些硬件压缩方案，如SunVideo视频捕获卡支持的CellB格式。这也使得&amp;quot;nv&amp;quot;可以用CUSeeMe格式发送视频，并将视频发送给在Mac和PC上运行CUSeeMe的用户。
最新的&amp;quot;nv&amp;quot;版本是1994年7月发布的3.3beta版本。当时我正在开发&amp;quot;4.0alpha&amp;quot;版本，该版本旨在将&amp;quot;nv&amp;quot;迁移到RTP协议v2，但因为我转到了其他项目上，这项工作从未被完成。为了保持完整性，Network Video tool归档文件中包含4.0 alpha代码的副本，但它是未完成的，并且存在已知问题，尤其是在RTPv2支持不完整的情况下。
&amp;ldquo;nv&amp;quot;中提供的框架后来成为Xerox PARC的&amp;quot;Jupiter multi-media MOO&amp;quot;项目中视频会议的基础，该项目最终分拆为独立公司&amp;quot;PlaceWare&amp;rdquo;，后来该公司被Microsoft收购。它也被用作许多硬件视频会议项目的基础，这些项目允许通过高带宽以太网和ATM网络发送完整的NTSC广播质量的视频。后来我还使用了其中一些代码作为&amp;quot;Mediastore&amp;quot;的基础，&amp;ldquo;Mediastore&amp;quot;是基于网络的视频记录和回放服务。
您还记得草案中其他人的动机/想法吗？
我们都是IP多播的研究人员，并且帮助创建了Internet多播主干网（又名MBONE）。MBONE由Steve Deering（IP多播的首位开发者），Van Jacobson和Steve Casner创建。 我和Steve Deering在斯坦福大学有同一位顾问，Steve离开斯坦福大学后就去了Xerox PARC工作，我作为IP多播相关项目的实习生在Xerox PARC呆了一个夏天，后来在斯坦福大学还继续为他们兼职工作，再后来转为全职。Van Jacobson和Steve Casner是最初的RTP RFC的四位作者中的两位，还有Henning Schulzrinne和我本人。我们所有人都使用MBONE工具进行各种形式的在线协作，并且试图提炼出所有这些工具可以使用的通用基本协议，RTP就是这样出现的。
多播很棒。而WebRTC完全是单播的，可以说一下是为什么吗？
在前往斯坦福大学并学习IP多播之前，我花了很长时间致力于让计算机成为人们相互交流的方式。这是从80年代初期开始的，当时我运行了一个拨号公告板系统，人们可以登录并留下彼此的消息，既可以是私人的（相当于电子邮件），也可以是公共的（讨论小组）。大约在同一时间，我还了解了在线服务提供商CompuServe。 CompuServe的很酷的功能之一就是所谓的&amp;quot;CB Simulator&amp;rdquo;，人们可以在其中进行实时交谈。这些都是基于文本的，但是它具有&amp;quot;频道&amp;quot;的概念，就像真正的CB广播一样，只要他们在同一个频道中，大家就可以看到其他人键入的内容。我构建了自己的CB版本，该版本在我可以访问的分时共享系统上运行，该系统可以让该系统上的用户实时向彼此发送消息，然后在接下来的几年中，我与朋友一起开发了更复杂的各种版本的实时通信工具，可以在几个不同的计算机系统和网络上运行。事实上，其中一个系统仍在运行，我每天都会用它与30多年前上大学的人们进行交流！
所有这些工具都是基于文本的，因为当时的计算机通常没有任何音频/视频功能，但是当我到达斯坦福大学并学习了IP多播时，我产生了一个想法。做一个真正的&amp;quot;收音机&amp;rdquo;，您可以将信号发送到网络上，该信号并不是特别发给任何人的，但是调谐到该&amp;quot;频道&amp;quot;的每个人都可以接收到它。碰巧的是，我正在为之移植IP多播代码的计算机是Sun的第一代SPARC-station，而它实际上内置了电话级别的音频硬件！您可以将麦克风中的声音数字化，然后通过内置扬声器（或通过耳机输出）播放。因此，我的第一个想法是弄清楚如何使用IP多播将音频实时发送到网络上，然后看一下是否可以构建一个使用实际音频而不是文本的&amp;quot;CB收音机&amp;rdquo;。
这里有一些棘手的事情需要解决，例如计算机一次只能播放一个音频流，因此，如果有多个人在讲话，则需要在数学上将多个音频流&amp;quot;混合&amp;quot;为一个，然后才能播放。不过一旦您了解了音频采样的工作原理，这些工作就可以全部通过软件完成。该音频应用程序使我致力于MBONE的开发，并最终通过&amp;quot;nv&amp;quot;实现了到视频的转换。
协议中遗漏了什么您原本希望添加的东西吗？有没有哪些让您后悔加入的内容？
我不觉得有什么后悔的，不过最终人们对RTP抱怨最多的其中一点就是RTCP实现的复杂性，RTCP是与RTP主数据流量并行运行的控制协议。我认为，RTP并未得到更广泛采用的主要原因就是太过复杂，尤其是在单播情况下，对RTCP的某些功能的需求不再那么大。由于网络带宽变得不再那么稀缺，而拥塞也不再是一个大问题，许多人最终只是通过纯TCP（以及后来的HTTP）流式传输音频和视频，一般来说，这就已经&amp;quot;足够好&amp;quot;了，以至于没有必要再去与RTP打交道。
不幸的是，使用TCP或HTTP意味着多方音频和视频应用程序必须通过网络多次向需要接收数据的每个对等方发送相同的数据，从而从带宽的角度来看，效率被大大降低。有时，我希望我们之前能更加努力地推动IP多点广播的应用，使其不仅限于研究领域。我认为，如果我们这么做了的话，可能我们早就可以看到有线电视和广播电视过渡到基于Internet的音频和视频。
有什么东西是您曾经想过使用RTP构建的呢？是不是有一些很酷的RTP项目/想法随时间流逝了呢？
我构建的其中一个有趣的项目是一个使用IP多播的经典游戏&amp;quot;Spacewar&amp;quot;版本。在没有任何类型的中央服务器的情况下，多个客户端可以各自运行spacewar的二进制文件，并开始广播其船舶的位置/速度/所面对的方向以及已发射的任何&amp;quot;子弹&amp;quot;的类似信息，所有其他客户端将收集这些信息并将其呈现在本地，从而使所有人都可以看到彼此的飞船和子弹，如果飞船撞向对方或被子弹击中，飞船就会&amp;quot;爆炸&amp;rdquo;。我甚至将爆炸中的&amp;quot;碎片&amp;quot;也做成了可以击毁其他船只的活动物体，有时会引起有趣的连锁反应！
本着原始游戏的精神，我使用模拟矢量图形对其进行了渲染，因此您可以执行诸如放大和缩小视图之类的操作，并且一切都会按比例放大/缩小。飞船本身是一堆矢量形式的线段，我在PARC的一些同事帮助我进行了设计，因此每个人的飞船都有独特的外观。
基本上，如果一个东西需要实时数据流，又无需数据按照精确的时序传输，那么它就可以从RTP中受益。因此，除了音频和视频，我们还可以构建共享白板之类的东西。甚至使用RTP进行文件传输，尤其是与IP多播结合使用时。
这就像BitTorrent，但是您不需要在对等方之间点对点地传输所有数据。原始的做种者可以立即将多播流发送到所有接收者，并且通过成功接收数据的任何对等方的重发，就可以快速解决传输中数据包丢失的问题。接收者甚至可以确定重传请求的范围，以便附近的一些对等方能够传递数据的副本，重传请求也可以被多播到该区域中的其他节点，因为网络中间的数据包丢失往往意味着下游有很多客户端错过了相同的数据。
为什么您必须实现自己的视频压缩协议？当时没有其他可用的东西了吗？
在我开始构建&amp;quot;nv&amp;quot;时，我所知道的唯一进行视频会议的系统是非常昂贵的专用硬件。例如，Steve Casner可以从BBN访问一个名为&amp;quot;DVC&amp;rdquo;（后来商品化为&amp;quot;PictureWindow&amp;rdquo;）的系统。压缩需要专用硬件，但是解压缩可以通过软件完成。&amp;ldquo;nv&amp;quot;之所以与众不同，是因为压缩和解压缩都是在软件中完成的，唯一的硬件要求是对输入的模拟视频信号进行数字化处理。
当时，有关如何压缩视频的许多基本概念已经存在了，诸如MPEG-1标准之类的东西大约在&amp;quot;nv&amp;quot;出现的同时出现，但在当时绝对不可能使用MPEG-1进行实时编码。我所做的更改都是关于吸收这些基本概念并使用更便宜的算法对其进行近似模拟，其中我避免了余弦变换和浮点之类的事情，甚至避免了整数乘法，因为在SPARC-stations上这些运算速度非常慢。我尽量只进行加/减法、位屏蔽和移位，这样可以使速度足够快，并使结果看起来仍像是视频。
在&amp;quot;nv&amp;quot;发布的一两年之内，不仅是在MBONE网络上，还有其他地方（如Mac上的CU-SeeMe工具），都出现了许多不同的音视频工具可供选择。很明显的，实时视频的时机成熟了。事实上，我最终使&amp;quot;nv&amp;quot;与许多这些工具互操作，还有某些工具甚至采用了&amp;quot;nv&amp;quot;编解码器，以便在使用压缩方案时它们可以互操作。
SDP # ICE # SRTP # SCTP # DTLS #</description></item><item><title>常见问题</title><link>https://webrtcforthecurious.com/zh/docs/11-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/zh/docs/11-faq/</guid><description>常见问题 # 为什么WebRTC使用UDP？ NAT穿透需要UDP。没有NAT穿透，就无法建立P2P连接。UDP不像TCP那样&amp;quot;保证送达&amp;rdquo;，因此WebRTC在用户级别提供这一特性。
要了解更多信息，请参考 连接 章节。
数据通道最多可以有几个？ 因为流标识符有16位，所以最多有65536个通道。您可以随时关闭再创建一个新的。 WebRTC是否有带宽限制？ 数据通道和RTP都使用拥塞控制。这意味着WebRTC会主动测量您的带宽并尝试使用最佳数值。这是一种平衡措施，这样可以尽量发送数据，而不会使网络连接过载。 我可以发送二进制数据吗？ 是的，您可以通过数据通道发送文本和二进制数据。 WebRTC延迟怎么样？ 对于未作调整的媒体，估计不到500毫秒。如果您愿意为延迟调整或牺牲音质/画质，有开发人员将延迟降到了100ms以下。
数据通道支持&amp;quot;部分可靠性&amp;quot;选项，该选项可以减少由于有损连接上的数据重传而引起的延迟。如果配置正确的话，速度可以超过TCP TLS连接。
什么情况下我会需要无序交付的数据通道？ 有时，新的信息会淘汰旧的信息（例如对象的位置信息）；或者，每个消息都是彼此独立的，并且您需要避免行头阻塞延迟。 我可以通过数据通道发送音频或视频吗？ 您可以通过数据通道发送任何数据。如果是在浏览器中这样使用，您就需要自行对数据进行解码，然后将其传递给媒体播放器进行渲染；在使用媒体通道时，这部分是自动完成的。</description></item></channel></rss>